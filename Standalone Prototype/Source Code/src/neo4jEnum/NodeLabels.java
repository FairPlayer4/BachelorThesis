package neo4jEnum;

import org.neo4j.graphdb.Label;

import neo4jUtility.PrintUtility;

/**
 * This enum holds all used Labels in this application.<br>
 * Also has some convenience methods for working with Labels.<br>
 * 
 * @author Kevin Bartik
 *
 */
public enum NodeLabels implements Label
{
    Neo4J_EA_Element, // An Element that is originally from Enterprise Architect.
    Neo4J_Generated_Element, // An Element that was generated by the application.

    CFT_AND_Gate,
    CFT_OR_Gate,
    CFT_XOR_Gate,
    CFT_NOT_Gate,
    CFT_MOON_Gate,

    CFT, // Can also represent a FT.
    CFT_Instance, // Can also represent a FT Instance.

    CFT_Inport,
    CFT_Outport, // Can also represent a Top Event.
    CFT_Inport_Instance,
    CFT_Outport_Instance,

    CFT_Basic_Event,

    Logical_Component,
    Logical_Component_Instance,
    Logical_Input,
    Logical_Output,
    Logical_Input_Instance,
    Logical_Output_Instance,

    MCS, // Minimal Cut Set stored in the database.
    Negated_MCS,
    Full_MCS,
    Full_Negated_MCS,
    Quant_Result,

    Error_Label; // Only used if errors appear.

    /**
     * Transforms a Label from the Neo4j database to NodeLabels.<br>
     * 
     * @param label
     *            The Label from the Neo4j database.
     * @return The corresponding Label in NodeLabels.
     */
    public static NodeLabels transformLabel(Label label)
    {
	switch (label.name())
	{
	    case "Neo4J_EA_Element":
		return Neo4J_EA_Element;
	    case "Neo4J_Generated_Element":
		return Neo4J_Generated_Element;

	    case "CFT":
		return CFT;
	    case "CFT_Instance":
		return CFT_Instance;

	    case "CFT_MOON_Gate":
		return CFT_MOON_Gate;
	    case "CFT_NOT_Gate":
		return CFT_NOT_Gate;
	    case "CFT_OR_Gate":
		return CFT_OR_Gate;
	    case "CFT_XOR_Gate":
		return CFT_XOR_Gate;
	    case "CFT_AND_Gate":
		return CFT_AND_Gate;

	    case "CFT_Basic_Event":
		return CFT_Basic_Event;

	    case "CFT_Inport":
		return CFT_Inport;
	    case "CFT_Inport_Instance":
		return CFT_Inport_Instance;
	    case "CFT_Outport":
		return CFT_Outport;
	    case "CFT_Outport_Instance":
		return CFT_Outport_Instance;

	    case "Logical_Component":
		return Logical_Component;
	    case "Logical_Component_Instance":
		return Logical_Component_Instance;
	    case "Logical_Input":
		return Logical_Input;
	    case "Logical_Input_Instance":
		return Logical_Input_Instance;
	    case "Logical_Output":
		return Logical_Output;
	    case "Logical_Output_Instance":
		return Logical_Output_Instance;

	    case "MCS":
		return MCS;
	    case "Negated_MCS":
		return Negated_MCS;
	    case "Full_MCS":
		return Full_MCS;
	    case "Full_Negated_MCS":
		return Full_Negated_MCS;
	    case "Quant_Result":
		return Quant_Result;

	    case "Error_Label":
		PrintUtility.printError("Error_Label found!");
		return Error_Label;

	    default:
		PrintUtility.printError("Label (" + label.name() + ") from Neo4j database is not in Enum NodeLabels!");
		return Error_Label;
	}
    }

    /**
     * Transforms an EA Element stereotype into the corresponding Label.<br>
     * 
     * @param stereotype
     *            The EA Element stereotype.
     * @param isInstance
     *            true means the element is an instance.
     * @return The Label for the stereotype.
     */
    public static NodeLabels getLabelForEA(String stereotype, boolean isInstance)
    {
	switch (stereotype)
	{
	    case "FT":
		return CFT;
	    case "FTInstance":
		return CFT_Instance;
	    case "CFT":
		return CFT;
	    case "CFTInstance":
		return CFT_Instance;

	    case "IESELogicalComponent":
		return Logical_Component;
	    case "IESELogicalComponentInstance":
		return Logical_Component_Instance;
	    case "IESELogicalInport":
		return Logical_Input;
	    case "IESELogicalInportInstance":
		return Logical_Input_Instance;
	    case "IESELogicalOutport":
		return Logical_Output;
	    case "IESELogicalOutportInstance":
		return Logical_Output_Instance;

	    case "FTAND":
		return CFT_AND_Gate;
	    case "FTOR":
		return CFT_OR_Gate;
	    case "FTM/N":
		return CFT_MOON_Gate;
	    case "FTXOR":
		return CFT_XOR_Gate;
	    case "FTBasicEvent":
		return CFT_Basic_Event;
	    case "FTNOT":
		return CFT_NOT_Gate;

	    case "InputFailureMode":
		if (isInstance)
		{
		    return CFT_Inport_Instance;
		}
		return CFT_Inport;
	    case "OutputFailureMode":
		if (isInstance)
		{
		    return CFT_Outport_Instance;
		}
		return CFT_Outport;

	    default:
		PrintUtility.printError("Element Stereotype (" + stereotype + ") from EA Repository can't be handled!");
		return Error_Label;
	}
    }

    /**
     * Returns true for Labels of EA Elements that have Tagged Values that are of interest to the application.<br>
     * 
     * @param label
     *            The Label.
     * @return true if the Label is relevant otherwise false.
     */
    public static boolean isLabelforTaggedValues(NodeLabels label)
    {
	switch (label)
	{
	    case CFT_MOON_Gate:
		return true;
	    case CFT_Basic_Event:
		return true;
	    case CFT_Inport:
		return true;
	    default:
		return false;
	}
    }

    /**
     * Used to get the Label of a specific gate type of a GateSet.<br>
     * 
     * @param gatetype
     *            The gate type number of the GateSet.
     * @return The Label corresponding to that gate type number.
     */
    public static NodeLabels getGateTypeLabel(int gatetype)
    {
	switch (gatetype)
	{
	    case 1:
		return CFT_AND_Gate;
	    case 2:
		return CFT_OR_Gate;
	    case 3:
		return CFT_NOT_Gate;
	    case 4:
		return CFT_XOR_Gate;
	    case 5:
		return CFT_MOON_Gate;
	    default:
		return CFT_AND_Gate;
	}
    }

    /**
     * Returns true if the specified label is some form of MCS label or a Quantitative Result. Otherwise false is returned.
     * @param label The specified label.
     * @return true if the specified label is some form of MCS label or a Quantitative Result. Otherwise false.
     */
    public static boolean isMCSLabel(Label label)
    {
	switch (label.name())
	{
	    case "MCS":
		return true;
	    case "Negated_MCS":
		return true;
	    case "Full_MCS":
		return true;
	    case "Full_Negated_MCS":
		return true;
	    case "Quant_Result":
		return true;
	    default:
		return false;
	}
    }

}
